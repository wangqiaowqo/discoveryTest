/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaonei.discoveryTest;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Log {

    public interface Iface {

        public String log(String category, String message) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void log(String category, String message,
                org.apache.thrift.async.AsyncMethodCallback<AsyncClient.log_call> resultHandler)
                throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                    org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot,
                org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public String log(String category, String message) throws org.apache.thrift.TException {
            send_log(category, message);
            return recv_log();
        }

        public void send_log(String category, String message) throws org.apache.thrift.TException {
            log_args args = new log_args();
            args.setCategory(category);
            args.setMessage(message);
            sendBase("log", args);
        }

        public String recv_log() throws org.apache.thrift.TException {
            log_result result = new log_result();
            receiveBase(result, "log");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(
                    org.apache.thrift.TApplicationException.MISSING_RESULT,
                    "log failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements
            AsyncIface {

        public static class Factory implements
                org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

            private org.apache.thrift.async.TAsyncClientManager clientManager;

            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(
                    org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.async.TAsyncClientManager clientManager,
                org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void log(String category, String message,
                org.apache.thrift.async.AsyncMethodCallback<log_call> resultHandler)
                throws org.apache.thrift.TException {
            checkReady();
            log_call method_call = new log_call(category, message, resultHandler, this,
                    ___protocolFactory, ___transport);
            ___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class log_call extends org.apache.thrift.async.TAsyncMethodCall {

            private String category;

            private String message;

            public log_call(String category, String message,
                    org.apache.thrift.async.AsyncMethodCallback<log_call> resultHandler,
                    org.apache.thrift.async.TAsyncClient client,
                    org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                    org.apache.thrift.transport.TNonblockingTransport transport)
                    throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.category = category;
                this.message = message;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                    throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("log",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                log_args args = new log_args();
                args.setCategory(category);
                args.setMessage(message);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                        getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
                        .getProtocol(memoryTransport);
                return (new Client(prot)).recv_log();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
            implements org.apache.thrift.TProcessor {

        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(
                    iface,
                    getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(
                I iface,
                Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
                Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("log", new log());
            return processMap;
        }

        public static class log<I extends Iface> extends
                org.apache.thrift.ProcessFunction<I, log_args> {

            public log() {
                super("log");
            }

            @Override
            public log_args getEmptyArgsInstance() {
                return new log_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public log_result getResult(I iface, log_args args) throws org.apache.thrift.TException {
                log_result result = new log_result();
                result.success = iface.log(args.category, args.message);
                return result;
            }
        }

    }

    public static class log_args implements org.apache.thrift.TBase<log_args, log_args._Fields>,
            java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "log_args");

        private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "category", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "message", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new log_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new log_argsTupleSchemeFactory());
        }

        public String category; // required

        public String message; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CATEGORY((short) 1, "category"), MESSAGE((short) 2, "message");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if
             * its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CATEGORY
                        return CATEGORY;
                    case 2: // MESSAGE
                        return MESSAGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its
             * not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                            org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                            org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log_args.class,
                    metaDataMap);
        }

        public log_args() {
        }

        public log_args(String category, String message) {
            this();
            this.category = category;
            this.message = message;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public log_args(log_args other) {
            if (other.isSetCategory()) {
                category = other.category;
            }
            if (other.isSetMessage()) {
                message = other.message;
            }
        }

        public log_args deepCopy() {
            return new log_args(this);
        }

        public void clear() {
            category = null;
            message = null;
        }

        public String getCategory() {
            return category;
        }

        public log_args setCategory(String category) {
            this.category = category;
            return this;
        }

        public void unsetCategory() {
            category = null;
        }

        /**
         * Returns true if field category is set (has been assigned a
         * value) and false otherwise
         */
        public boolean isSetCategory() {
            return category != null;
        }

        public void setCategoryIsSet(boolean value) {
            if (!value) {
                category = null;
            }
        }

        public String getMessage() {
            return message;
        }

        public log_args setMessage(String message) {
            this.message = message;
            return this;
        }

        public void unsetMessage() {
            message = null;
        }

        /**
         * Returns true if field message is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetMessage() {
            return message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                message = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CATEGORY:
                    if (value == null) {
                        unsetCategory();
                    } else {
                        setCategory((String) value);
                    }
                    break;

                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        setMessage((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CATEGORY:
                    return getCategory();

                case MESSAGE:
                    return getMessage();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CATEGORY:
                    return isSetCategory();
                case MESSAGE:
                    return isSetMessage();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof log_args) {
                return this.equals((log_args) that);
            }
            return false;
        }

        public boolean equals(log_args that) {
            if (that == null) {
                return false;
            }

            boolean this_present_category = true && isSetCategory();
            boolean that_present_category = true && that.isSetCategory();
            if (this_present_category || that_present_category) {
                if (!(this_present_category && that_present_category)) {
                    return false;
                }
                if (!category.equals(that.category)) {
                    return false;
                }
            }

            boolean this_present_message = true && isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message)) {
                    return false;
                }
                if (!message.equals(that.message)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(log_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            log_args typedOther = other;

            lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCategory()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(category,
                        typedOther.category);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(message,
                        typedOther.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
                throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
                throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("log_args(");
            boolean first = true;

            sb.append("category:");
            if (category == null) {
                sb.append("null");
            } else {
                sb.append(category);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("message:");
            if (message == null) {
                sb.append("null");
            } else {
                sb.append(message);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
                ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class log_argsStandardSchemeFactory implements SchemeFactory {

            public log_argsStandardScheme getScheme() {
                return new log_argsStandardScheme();
            }
        }

        private static class log_argsStandardScheme extends StandardScheme<log_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, log_args struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CATEGORY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.category = iprot.readString();
                                struct.setCategoryIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                        schemeField.type);
                            }
                            break;
                        case 2: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.message = iprot.readString();
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                        schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, log_args struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.category != null) {
                    oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
                    oprot.writeString(struct.category);
                    oprot.writeFieldEnd();
                }
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    oprot.writeString(struct.message);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class log_argsTupleSchemeFactory implements SchemeFactory {

            public log_argsTupleScheme getScheme() {
                return new log_argsTupleScheme();
            }
        }

        private static class log_argsTupleScheme extends TupleScheme<log_args> {

            public void write(org.apache.thrift.protocol.TProtocol prot, log_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCategory()) {
                    optionals.set(0);
                }
                if (struct.isSetMessage()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCategory()) {
                    oprot.writeString(struct.category);
                }
                if (struct.isSetMessage()) {
                    oprot.writeString(struct.message);
                }
            }

            public void read(org.apache.thrift.protocol.TProtocol prot, log_args struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.category = iprot.readString();
                    struct.setCategoryIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.message = iprot.readString();
                    struct.setMessageIsSet(true);
                }
            }
        }

    }

    public static class log_result implements
            org.apache.thrift.TBase<log_result, log_result._Fields>, java.io.Serializable,
            Cloneable {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
                "log_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
                "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new log_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new log_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience
         * methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if
             * its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an
             * exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its
             * not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                    _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                            org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log_result.class,
                    metaDataMap);
        }

        public log_result() {
        }

        public log_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public log_result(log_result other) {
            if (other.isSetSuccess()) {
                success = other.success;
            }
        }

        public log_result deepCopy() {
            return new log_result(this);
        }

        public void clear() {
            success = null;
        }

        public String getSuccess() {
            return success;
        }

        public log_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value)
         * and false otherwise
         */
        public boolean isSetSuccess() {
            return success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been
         * assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof log_result) {
                return this.equals((log_result) that);
            }
            return false;
        }

        public boolean equals(log_result that) {
            if (that == null) {
                return false;
            }

            boolean this_present_success = true && isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!success.equals(that.success)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(log_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            log_result typedOther = other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(success,
                        typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
                throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
                throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("log_result(");
            sb.append("success:");
            if (success == null) {
                sb.append("null");
            } else {
                sb.append(success);
            }
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
                ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                        new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class log_resultStandardSchemeFactory implements SchemeFactory {

            public log_resultStandardScheme getScheme() {
                return new log_resultStandardScheme();
            }
        }

        private static class log_resultStandardScheme extends StandardScheme<log_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, log_result struct)
                    throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                        schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, log_result struct)
                    throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class log_resultTupleSchemeFactory implements SchemeFactory {

            public log_resultTupleScheme getScheme() {
                return new log_resultTupleScheme();
            }
        }

        private static class log_resultTupleScheme extends TupleScheme<log_result> {

            public void write(org.apache.thrift.protocol.TProtocol prot, log_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            public void read(org.apache.thrift.protocol.TProtocol prot, log_result struct)
                    throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
